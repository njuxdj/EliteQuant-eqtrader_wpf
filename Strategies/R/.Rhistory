skewness(spx.r)
kurtosis(spx.r)
hist(spx.r, freq=F,ylim=c(0,0.5), breaks=20)
curve(dnorm(x), from=-5,to=5,col='red',add=T)
qqnorm(spx.r)
qqline(spx.r,col=2)
# spx.r is far from normal
shapiro.test(coredata(spx.r))
return(1)
acf(spx.r, lag.max = 20, plot=T)
pacf(spx.r, lag.max=20, plot=T)
library(tseries)
adf.test(spx.r)  			# Augmented Dickey-Fuller unit root
acf(spx.r, lag.max = 20, plot=T)
pacf(spx.r, lag.max=20, plot=T)
library(tseries)
adf.test(spx.r)  			# Augmented Dickey-Fuller unit root
pp.test(spx.r)				# Phillips-Perron unit root
adf.test(spx.r)  			# Augmented Dickey-Fuller unit root
pp.test(spx.r)				# Phillips-Perron unit root
pp.test(spx.p)
po.test(merge(spx.r,aapl.r))		# Phillips-Ouliaris Cointegration
library(forecast)
install.packages("forecast")
library(forecast)
auto.arima(coredata(spx.r))		# automatically find the p,d,q
spx.arima <- arima(spx.r, order=c(3,0,3))
spx.arima
## forecast
library("forecast")
library(forecast)
spx.r.arima <- arima(spx.r, order=c(3,0,3))
spx.r.arima.forecast <- forecast.Arima(spx.r.arima, h=5)
plot.forecast(spx.r.arima.forecast)
help(forecast.Arima)
plot.forecast(spx.r.arima.forecast)
acf(spx.r.arima, forecast$residuals, lag.max = 20)
acf((spx.r - mean(spx.r))^2)  				# conditional heteroscedasticity
pacf((spx.r - mean(spx.r))^2)  				# conditional heteroscedasticity
acf((spx.r - mean(spx.r))^2)  				# conditional heteroscedasticity
spx.r.garch <- garch(spx.r,trace = F)
spx.r.res <- spx.r.garch$res[-1]
acf(spx.r.res)
acf(spx.r.res^2)
acf(spx.r.res)
acf(spx.r.res^2)
spx.r.res <- spx.r.garch$res[-1]
acf((spx.r - mean(spx.r))^2)  				# conditional heteroscedasticity
spx.r.garch <- garch(spx.r,trace = F)
names(result) <- c('skew','kurtosis')
print(result)
summary(spx.r)         # spx.r[which(spx.r>0.11)]
spx.r[which(spx.r>0.11)]
library(moments)
skewness(spx.r)
kurtosis(spx.r)
hist(spx.r, freq=F,ylim=c(0,0.5), breaks=20)
curve(dnorm(x), from=-5,to=5,col='red',add=T)
qqnorm(spx.r)
qqline(spx.r,col=2)
shapiro.test(coredata(spx.r))
acf(spx.r, lag.max = 20, plot=T)
af <- acf(spx.r, lag.max = 20, plot=T)
af
pacf(spx.r, lag.max=20, plot=T)
pa <- pacf(spx.r, lag.max=20, plot=T)
pa
library(tseries)
adf.test(spx.r)  			# Augmented Dickey-Fuller unit root
# PP test also rejects null hypothesis of unit root and suggests stationarity
pp.test(spx.r)				# Phillips-Perron unit root
pp.test(spx.p)
library(forecast)
# It picks ARIMA(3,0,3)
auto.arima(coredata(spx.r))		# automatically find the p,d,q
spx.r.arima <- arima(spx.r, order=c(3,0,3))
help(forecast.Arima)
spx.r.arima
class(spx.r.arima)
spx.r.arima.forecast <- forecast.Arima(spx.r.arima, h=5)
spx.r.arima.forecast
dim(spx.r)
plot.forecast(spx.r.arima.forecast)
class(spx.r.arima.forecast)
str(spx.r.arima.forecast)
acf(spx.r.arima, spx.r.arima.forecastt$residuals, lag.max = 20)
acf(spx.r.arima, spx.r.arima.forecast$residuals, lag.max = 20)
help(acf)
acf(spx.r.arima.forecast$residuals, lag.max = 20)
Box.test(spx.r.arima.forecast$residuals, lag = 20, type = "Ljung-Box") 	# test autocorrelation of forecast errors
help(Box.test)
Box.test(spx.r.arima.forecast$residuals, lag = 20, type = "Ljung-Box")
plot.ts(spx.r.arima.forecast$residuals) 			# make a time plot of forecast errors
plotForecasErrors(spx.r.arima.forecast$residuals)		# make a histgram
plotForecasErrors(spx.r.arima.forecast$residuals)		# make a histgram
acf((spx.r - mean(spx.r))^2)  				# conditional heteroscedasticity
spx.r.garch <- garch(spx.r,trace = F)
spx.r.garch
spx.r.res <- spx.r.garch$res[-1]
acf(spx.r.res)
acf(spx.r.res^2)
help(hurst)
library(pracma)
library(pracma)
hurst(spx.p)
hurst(spx.r)
pp.test(spx.p)
adf.test(spx.p)
pp.test(spx.p)
hurst(spx.p)
adf.test(spx.p)
gbm <- cumsum(rnorm(0,100))
plot(gbm)
help(rnorm)
help(cumsum)
gbm<-cumsum(rnorm(1000,0,2))
plot(gbm)
rm<-cumsum(rnorm(1000,0,2))
rm
plot(rm)
rm<-cumsum(rnorm(1000,0,2))
plot(rm)
gbm<-exp(rm)
plot(gbm)
plot(rm)
help(rnorm)
rm<-cumsum(rnorm(1000,0,0.2/sqrt(252)))
plot(rm)
gbm<-exp(rm)
plot(gbm)
hurst(gbm)
res<-hurst(gbm)
res
class(res)
t <- 1:1/250:4
t
head(t)
t <- 0:1/250:4
1/250
help(seq)
t <- seq(0,4,by=1/250)
head(t)
length(t)
w <- rnorm(250*4,sd=1)
w <- rnorm(250*4,sd=1/sqrt(250))
mu <- 0.5
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
help(dlns)
dim(dlns)
length(dlns)
lns<-cumsum(dlns)
length(lns)
dlns[1]
lns[1]
ln(S0)
log(S0)
S <- c(S0,exp(lns))
plot(t,S)
exp(lns)
exp(lns)[1]
lns[1]
cumsum(dlns)[1]
cumsum(dlns)[2]
lns<-cumsum(dlns)+log(S0)
lns[1]
S <- c(S0,exp(lns))
plot(t,S)
ES <- S*exp(mu*t)
plot(t,S)
ES <- S*exp(mu*t)
lines(t,ES,col='red')
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurst(S)
mu <- 0.5
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
lns<-cumsum(dlns)+log(S0)
S <- c(S0,exp(lns))
plot(t,S)
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurst(S)
hurst(S)/2
mu <- 0
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
lns<-cumsum(dlns)+log(S0)
S <- c(S0,exp(lns))
plot(t,S)
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurst(S)/2
plot(t,S,type='l')
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
mu <- 1
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
lns<-cumsum(dlns)+log(S0)
S <- c(S0,exp(lns))
plot(t,S,type='l')
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurst(S)/2
hurst(spx.p)/2
mr <- log(rnorm(10000)+1000)
hurst(mr)
hurst(mr)/2
tr = log(cumsum(rnorm(100000)+1)+1000)
hurst(tr)
xgn <- rnorm(1024)
hurst(xgn)
mu <- 1
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
lns<-cumsum(dlns)+log(S0)
S <- c(S0,exp(lns))
plot(t,S,type='l')
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurst(S)
hurst(ES)
mu <- 0
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
lns<-cumsum(dlns)+log(S0)
S <- c(S0,exp(lns))
plot(t,S,type='l')
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurst(S)
hurst(ES)
w <- rnorm(1000)
plot(w, type = "l")
hurst(w)
x <- w <- rnorm(1000)
for (t in 2:1000) x[t] <- x[t-1]+w[t]
plot(x, type="l")
acf(x)
pacf(x)
hurst(x)
library(pracma)
# Hurst test shows trending
hurst(spx.p)
mu <- 0
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
lns<-cumsum(dlns)+log(S0)
S <- c(S0,exp(lns))
plot(t,S,type='l')
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurst(S)
mu <- 0
sigma <- 0.3
T <- 4
S0 <- 100
w <- rnorm(250*4,sd=1/sqrt(250))
t <- seq(0,4,by=1/250)
dlns <- (mu+0.5*sigma^2)*1/250+sigma*w
lns<-cumsum(dlns)+log(S0)
S <- c(S0,exp(lns))
plot(t,S,type='l')
ES <- S0*exp(mu*t)
lines(t,ES,col='red')
hurstexp(S)
hurstexp(spx.p)
hurstexp(spx.p)
acf(spx.r, lag.max = 20, plot=T)
pacf(spx.r, lag.max=20, plot=T)
library(forecast)
# It automatically picks ARIMA(3,0,3)
auto.arima(coredata(spx.r))		# automatically find the p,d,q
spx.r.arima <- arima(spx.r, order=c(3,0,3))
## five period forecast
spx.r.arima.forecast <- forecast.Arima(spx.r.arima, h=5)
plot.forecast(spx.r.arima.forecast)
spx.r.arima.forecast
w <- rnorm(1000)
plot(w, type = "l")
kurtosis(w)
x <- w <- rnorm(1000)
for (t in 2:1000) x[t] <- x[t-1]+w[t]
plot(x, type="l")
kurtosis(x)
pp.test(spx.r)				# Phillips-Perron unit root
hurstexp(spx.p)
69000-15000
head(spx.r)
spx.r.lag1 <- lag(spx.r)
head(spx.r.lag1)
spx.r.lag2 <- lag(spx.r,2)
head(spx.r.lag2)
spx.r.glm <- cbind(spx.r>0,lag(spx.r),lag(spx.r,2),lag(spx.r,3),lag(spx.r,4),lag(spx.r,5))
head(spx.r.glm,10)
spx.r.glm2 <- spx.r.glm[-1:-5,]
head(spx.r.glm2)
spx.r.glm.res <- glm(daily.return~daily.return.1+daily.return.2+daily.return.3+daily.return.4+daily.return.5, family=binomial(logit),data=spx.r.glm2)
spx.r.glm.res
spx.r.glm.fit <- glm(daily.return~daily.return.1+daily.return.2+daily.return.3+daily.return.4+daily.return.5, family=binomial(logit),data=spx.r.glm2)
spx.r.glm.fit
summary(spx.r.glm.fit)
exp(0.2)/(1+exp(0.2))
acf(spx.r, lag.max = 20, plot=T)
spx.r.glm <- cbind(spx.r>0,lag(spx.r),lag(spx.r,2),lag(spx.r,5),lag(spx.r,16),lag(spx.r,18))
spx.r.glm2 <- spx.r.glm[-1:-18,]
head(spx.r.glm2)
spx.r.glm.fit <- glm(daily.return~daily.return.1+daily.return.2+daily.return.3+daily.return.4+daily.return.5, family=binomial(logit),data=spx.r.glm2)
summary(spx.r.glm.fit)
class(spx.r.glm.fit)
str(spx.r.glm.fit)
spx.r.glm.fit$fitted.values
spx.r.glm.fit$fitted.values<0.5
length(spx.r.glm.fit$fitted.values<0.5)
length(spx.r.glm.fit$fitted.values>0.5)
length(whichspx.r.glm.fit$fitted.values>0.5))
length(which(spx.r.glm.fit$fitted.values>0.5))
length(whichspx.r.glm.fit$fitted.values<0.5))
length(which(spx.r.glm.fit$fitted.values<0.5))
length(which(spx.r.glm.fit$fitted.values=0.5))
length(which(spx.r.glm.fit$fitted.values==0.5))
coef(spx.r.glm.fit)
confint(spx.r.glm.fit)
exp(coef((spx.r.glm.fit))
)
table(rpois(100, 5))
require(stats)
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
install.packages("neuralnet")
library('neuralnet')
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
trainingdata
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=c(10,8), threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=c(10,2), threshold=0.01)
plot(net.sqrt)
setwd("C:/QuantTrading/Strategies/R")
################# step 0: get data for EWA and EWC #################
rm(list=ls())
library(quantmod)
tckrs <- c("EWA","EWC")
EWA.p <- EWA$EWA.Adjusted
getSymbols(tckrs, src='yahoo', from ='2006-04-04', to = '2012-04-09')
EWC.p <- EWC[,6]
ylim <- c(0, max(EWA.p,EWC.p)+10)
plot(x=EWA.p, xlab="Date", ylab="Prices", ylim = ylim,main="Price Chart", type="l")
lines(x=EWC.p, type='l',col='darkgreen')
legend(x = 'topleft', legend = c("EWA", "EWC"), lty=1, col=c("black","darkgreen"))
setwd("C:/QuantTrading/Strategies/R")
################# step 0: get data for EWA and EWC #################
rm(list=ls())
library(quantmod)
tckrs <- c("EWA","EWC")
getSymbols(tckrs, src='yahoo', from ='2006-04-04', to = '2012-04-09')
EWA.p <- EWA$EWA.Adjusted
EWC.p <- EWC[,6]
ylim <- c(0, max(EWA.p,EWC.p)+10)
plot(x=EWA.p, xlab="Date", ylab="Prices", ylim = ylim,main="Price Chart", type="l")
lines(x=EWC.p, type='l',col='darkgreen')
legend(x = 'topleft', legend = c("EWA", "EWC"), lty=1, col=c("black","darkgreen"))
plot(coredata(EWA.p),coredata(EWC.p), xlab="EWA",ylab="EWC")
################# step 1: ols #################
library("fUnitRoots") # unit test
## 1.1 EWC ~ EWA
#regression.ca <- lm(EWC.p ~ 0+EWA.p)
regression.ca <- lm(EWC.p ~ EWA.p)
# hedgeRatio = 1.135
hedgeRatio <-regression.ca$coefficients[2]
# adf test on spread, which is actually residuals of regression above
# adf=-3.6692, p-value=0.01 that rejects unit root
# EWC-1.135*EWA = I(0)
# in other words they are cointergrated
plot(regression.ca$residuals)
adfTest(coredata(regression.ca$residuals), type='c',lags=1)
## 1.2 EWA ~ EWC
# adf=-3.6856, p-value=0.01, hedgeRatio=0.811
# Note that 1.135*0.811 != 1
regression.ac <- lm(EWA.p ~ EWC.p)
adfTest(coredata(regression.ac$residuals), type="c",lags=1)
################# step 2: Johansen Test #################
## null hypothesis of r=0 < (no cointegration at all), r<1 (till n-1, where n=2 in this case).
library("urca")
# ca.jo is set to lag=2, ecdet=const->intercept but no trend
# we can't reject r<=1, implying only one cointegrating relationship
# Compared with Epchan's book, r=0 is rejected at 95% level. r=1 cannot be rejected at 90% level
coRes.trace <- ca.jo(data.frame(EWA.p,EWC.p),type="trace",K=2,ecdet="const", spec="longrun")
summary(coRes.trace)
coRes.eigen <- ca.jo(data.frame(EWA.p,EWC.p),type="eigen",K=2,ecdet="const", spec="longrun")
summary(coRes.eigen)
1/0.84
library("urca")
# ca.jo is set to lag=2, ecdet=const->intercept but no trend
# we can't reject r<=1, implying only one cointegrating relationship
# Compared with Epchan's book, r=0 is rejected at 95% level. r=1 cannot be rejected at 90% level
coRes.trace <- ca.jo(data.frame(EWA.p,EWC.p),type="trace",K=2,ecdet="const", spec="longrun")
summary(coRes.trace)
coRes.eigen <- ca.jo(data.frame(EWA.p,EWC.p),type="eigen",K=2,ecdet="const", spec="longrun")
summary(coRes.eigen)
################# step 3: introduce natural resource etf IGE #################
getSymbols('IGE', src='yahoo', from ='2006-04-04', to = '2012-04-09')
IGE.p <- IGE[,6]
# we can only reject r=0 null hypothesis at 95% cl, indicating one pair.
coRes2.trace <- ca.jo(data.frame(EWA.p,EWC.p,IGE.p),type="trace",K=2,ecdet="const", spec="longrun")
summary(coRes2.trace)
# we can't reject r=0
# Instead, Epchan's result shows 3 pairs at 95% CL.
coRes2.eigen <- ca.jo(data.frame(EWA.p,EWC.p,IGE.p),type="eigen",K=2,ecdet="const", spec="longrun")
summary(coRes2.eigen)
## eigenvectors are normalised column vectors ordered in decreasing order of their corresponding eigenvalues
## so the first cointegrating relation is strongest
# Eigenvalues are 0.0118, 0.008315, 0.003156
# Eigenvectors are
# EWA 1 1 1
# EWC -1.193 2.74 6.1
# IGE 0.270 -2.75 -2.234
# Const 1.922 8.959 -93.33
# y <- cbind(EWA.p, EWC.p, IGE.p)
y <- merge(EWA.p, EWC.p, IGE.p)
weight <- coRes2.trace@V
yport <- y %*% weight[-4,1]
yport <- xts(yport, index(y)) # make it xts again
adf.test(yport, k = 1)
plot(yport)
## Find value of beta and thus the halflife of mean reversion by linear regression fit
ylag <- lag(yport, 1)
adfTest(yport, k = 1)
adfTest(yport, lags = 1)
plot(yport)
## Find value of beta and thus the halflife of mean reversion by linear regression fit
ylag <- lag(yport, 1)
deltaY <- yport - ylag
regression_results <- lm(deltaY[-1] ~ ylag[-1]) # Error-correction
summary(regression_results)
# halflife = 21 days, close to 22 days in Epchan's book.
halflife <- -log(2) / regression_results[["coefficients"]][2]
################# step 4: linear mean-reverting strategy #################
# instead of capital, here it usese # of shares
lookback<- round(halflife)
# rollapply includes current date
nShares <- -(yport - rollapply(yport, width = lookback, mean, align="right")) / rollapply(yport, width = lookback, sd, align="right")
# hold yesterday's nshare through today
pnl <- lag(nShares,1) * (yport-lag(yport,1))
pnl[is.na(pnl)] <- 0
plot(cumsum(pnl))
head(pnl,30)
head(cumsum,30)
head(ret,30)
ret <- pnl/abs(yport*lag(nShares,1))
head(ret,30)
ret[is.na(ret)]<-1
head(ret,30)
ret[is.na(ret)]<-0
cumret <- cumprod(1+ret)-1
head(cumret)
head(cumret,30)
head(ret)
ret <- pnl/abs(yport*lag(nShares,1))
ret[is.na(ret)]<-0
cumret <- cumprod(1+ret)-1
head(cumret,30)
head(ret,30)
plot(cumret)
View(cumret)
0.15*10000
73-5+1
