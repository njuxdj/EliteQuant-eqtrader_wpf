{
    "contents" : "#####################################################################################\n############################ Cointegration Test Function#############################\n## usage:  res <- DailySingleName()\n#####################################################################################\nDailySingleName <- function(ticker='^GSPC', startDate = '2007-01-01')\n{\n  ###-------------------------------- Load Data -------------------------------###\n  library(quantmod)\n  SPX <- getSymbols(ticker, from=startDate, auto.assign = F)\n  spx.p <- SPX[,6]\n  spx.r <- spx.p/lag(spx.p)-1\n  # remove the first element which is NA\n  spx.r <- spx.r[!is.na(spx.r)]\n  names(spx.r) <- 'daily return'\n\n  summary(spx.r)\n  # 2008-10-13 it jumped 11.6%\n  # spx.r[which(spx.r>0.11)]\n  library(moments)\n  result <- c(skewness(spx.r), kurtosis(spx.r))\n  # skew and kurtosis suggests that return is far from normal\n  names(result) <- c('skew','kurtosis')\n  print(result)\n  \n  ###-------------------------------- Normality Test-------------------------------###\n  hist(spx.r, freq=F,ylim=c(0,0.5), breaks=20)\n  curve(dnorm(x), from=-5,to=5,col='red',add=T)\n  qqnorm(spx.r)\n  qqline(spx.r,col=2)\n  # shapiro test also finds spx.r far from normal\n  shapiro.test(coredata(spx.r))\n  \n  \n  ###------------------------------- Stationarity Test ----------------------------###\n  library(tseries)\n  # price has unit root, not stationary\n  adf.test(spx.p)\n  # ADF test rejects null hypothesis of unit root, suggesting stationarity\n  adf.test(spx.r)    \t\t# Augmented Dickey-Fuller unit root\n  # PP test also rejects null hypothesis of unit root and suggests stationarity\n  pp.test(spx.p)\n  pp.test(spx.r)\t\t\t\t# Phillips-Perron unit root\n  library(pracma)\n  # Hurst test shows trending\n  hurstexp(spx.p)\n  \n  \n  ###-------------------------------- ARIMA Test -------------------------------###\n  # at 5%, acf has negative lag 1, lag 5, lag 18, and positive lag 16\n  acf(spx.r, lag.max = 20, plot=T)\n  pacf(spx.r, lag.max=20, plot=T)\n  library(forecast)\n  # It automatically picks ARIMA(3,0,3)\n  auto.arima(coredata(spx.r))\t\t# automatically find the p,d,q\n  spx.r.arima <- arima(spx.r, order=c(3,0,3))\n  ## five period forecast\n  spx.r.arima.forecast <- forecast.Arima(spx.r.arima, h=5)\n  plot.forecast(spx.r.arima.forecast)\n  # residual is AR(0)\n  acf(spx.r.arima.forecast$residuals, lag.max = 20)\n  # test autocorrelation of forecast errors\n  Box.test(spx.r.arima.forecast$residuals, lag = 20, type = \"Ljung-Box\") \t\n  # test if the forecast errors are normally distributed\n  plot.ts(spx.r.arima.forecast$residuals) \t\t\t# make a time plot of forecast errors\n  \n  \n  ###-------------------------------- GARCH Test -------------------------------###\n  # r^2 is autocorrelated\n  acf((spx.r - mean(spx.r))^2)  \t\t\t\t# conditional heteroscedasticity\n  spx.r.garch <- garch(spx.r,trace = F)\n  spx.r.res <- spx.r.garch$res[-1]\n  acf(spx.r.res)\n  acf(spx.r.res^2)\n  \n  \n  return(result)\n}",
    "created" : 1415708922394.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1303224163",
    "id" : "6E301D02",
    "lastKnownWriteTime" : 1413724844,
    "path" : "C:/QuantTrading/Strategies/R/DailySingleName.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}