{
    "contents" : "#####################################################################################\n######################## EOD Daily Single Name Scan  ################################\n## usage:  res<-DailyScan(\"EWA\",\"^GSPC\")\n## output: price/return statistics and oscillators\n#####################################################################################\nDailyScan <- function(ticker, idx='^GSPC')\n{\n  # initialization\n  # setwd(\"C:\\QuantTrading\\Strategies\\R\")\n  # rm(list = setdiff(ls(),lsf.str()))\n  # library(quantmod)\n  library(moments)\n  \n  today <- Sys.Date()\n  startdate <- today - 365*3          # back three years\n  lookback <- 250                     # lookback period\n  \n  #******************** 0. load data **************************#\n  syms <- getSymbols(Symbols=c(ticker,idx), from=startdate)\n  y <- get(syms[1])        # ticker\n  rm(list=eval(syms[1]))\n  if (length(syms) < 2)\n  {\n    x <- y        # in case ticker == index\n  }\n  else\n  {\n    x <- get(syms[2])   # index\n    rm(list=eval(syms[2]))\n  }\n  \n  # cut short two series in case of new stock\n  c2 <- merge(x,y)\n  s2 <- rowSums(c2)\n  NonNAIndex <- which(!is.na(s2))\n  #FirstNonNA <- min(NonNAIndex)\n  x <- c2[NonNAIndex,1:6]\n  y <- c2[NonNAIndex,7:12]\n  \n  \n  \n  #******************** 1. get OHLCVA and chg %chg*************************#\n  ytoday <- coredata(y[nrow(y),])     # get last row\n  ypreday <- coredata(y[nrow(y)-1,])   # get second last row\n  \n  result <- ytoday\n  # column 1:8\n  result <- c(result, ytoday[,4]-ypreday[,4], ytoday[,4]/ypreday[,4]-1)\n  names(result) <- c('Open','High','Low','Close','Volume','AdjClose','Change','Change(%)')\n  \n  #*************** 2. get mean, std, correlation, alpha, beta *********************#\n  yr <- y[,6]/lag(y)[,6] - 1\n  xr <- x[,6]/lag(x)[,6] - 1\n  if (length(yr) > lookback)\n  {\n    yr <- yr[(length(yr)-lookback+1):length(yr)]\n    xr <- xr[(length(xr)-lookback+1):length(xr)]\n    \n    avg <- mean(yr); std <- sd(yr)\n    sk <- skewness(yr); kur <- kurtosis(yr)\n    c <- cor(yr,xr)\n    regression <- lm(yr ~ xr)\n    alpha <- regression$coefficients[[1]]\n    beta <- regression$coefficients[[2]]\n  }\n  else\n  {\n    avg <- NA; std <- NA; sk <- NA; kur <- NA; c <- NA; alpha <- NA; beta <- NA\n  }\n  \n  # column 9:15\n  result <- c(result, avg, std, sk, kur, c, alpha, beta)\n  names(result)[9:15] <- c('RAvg','RStd','RSkew','RKurtosis','RCorr','Alpha','Beta')\n  \n  #*************** 3. get technical indicators *********************#\n  # http://www.tradinggeeks.net/2014/07/technical-analysis-with-r/\n  # 3.1 sma/ema 5 10 20 50 100 200\n  # todo: and Double Exponential Smoothing or Holt-Winters\n  # in EMA, alpha = 2/(N+1)  EMAt = EMA_t-1 + alpha*(pt - EMA_t-1)\n  p <- y[,6]       # price\n  if (length(p) > 200)\n  {\n    SMA5 <- SMA(p,5)[length(p)]\n    SMA10 <- SMA(p,10)[length(p)]\n    SMA20 <- SMA(p,20)[length(p)]\n    SMA50 <- SMA(p,50)[length(p)]\n    SMA100 <- SMA(p,100)[length(p)]\n    SMA200 <- SMA(p,200)[length(p)]\n    EMA14 <- EMA(p,14)[length(p)]\n  }\n  else\n  {\n    SMA5 <- NA; SMA10 <- NA; SMA50 <- NA; SMA100 <- NA; SMA200 <- NA; EMA14 <- NA\n  }\n  \n  # column 16:21\n  result <- c(result, SMA5, SMA10, SMA50, SMA100, SMA200, EMA14)\n  names(result)[16:21] <- c('SMA5','SMA10','SMA50','SMA100','SMA200','EMA14')\n  \n  # 3.2 MACD(12,26,9)\n  if (length(p) > 35)\n  {\n    macd <- MACD(p, nFast=12, nSlow=26, nSig=9, motype=SMA)[length(p)]\n  }\n  else\n  {\n    macd <- matrix(c(NA,NA),nrow=1)\n  }\n  \n  # column 22:23\n  result <- c(result, macd[,1],macd[,2])\n  names(result)[22:23] <- c('MACD(12,26)','Signal(9)')\n  \n  # 3.3 RSI (7, 14, 21)\n  if (length(p) > 30)\n  {\n    rsi7 <- RSI(p,n=7)[length(p)]\n    rsi14 <- RSI(p,n=14)[length(p)]\n    rsi21 <- RSI(p,n=21)[length(p)]\n  }\n  else\n  {\n    rsi7 <- NA; rsi14 <- NA; rsi21 <- NA\n  }\n  \n  # column 24:26\n  result <- c(result, rsi7, rsi14, rsi21)\n  names(result)[24:26] <- c('RSI7','RSI14','RSI21')\n  \n  # 3.4 z score and Bollinger Bands\n  # BBands(20,2)\n  # %B = 1 upper band, %B = 0 lower band, %B = 0.5 center 20D SMA\n  if (length(p) > 30)\n  {\n    bb20 <- BBands(p, sd = 2.0)[length(p)]\n  }\n  else\n  {\n    bb20 <- matrix(c(NA,NA,NA,NA),nrow=1)\n  }\n  \n  # column 27:30\n  result <- c(result, bb20[,1],bb20[,2],bb20[,3],bb20[,4])\n  names(result)[27:30] <- c('BBdn(20,2)','BBmavg(20,2)','BBup(20,2)','BBpctB(20,2)')\n  \n  \n  # 3.5 Stoch and WilliamsR\n  \n  return(result)\n}",
    "created" : 1415668370072.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3067880272",
    "id" : "10D28D87",
    "lastKnownWriteTime" : 1415668451,
    "path" : "C:/QuantTrading/Strategies/R/DailyScan.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}