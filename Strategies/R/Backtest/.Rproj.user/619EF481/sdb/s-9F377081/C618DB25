{
    "contents" : "#####################################################################################\n############################ Cointegration Test Function#############################\n## usage:  res <- cointegrationTests('EWA','EWc','2007-01-01',50)\n#####################################################################################\ncointegrationTests <- function(A, B, startDate = '2007-01-01', lookback = 100)\n{\n  library(quantmod)\n  library(tseries)\n  library(fUnitRoots)\n  library(urca)\n  cat(\"Processing stocK:\", A, \" and \", B, \" start date: \", startDate, \" lookback: \", lookback, \"\\n\")\n  \n  #********************************** step 0: download data ***********************#\n  aData <- getSymbols(A, from=startDate, auto.assign = F)\n  a.p <- aData[,6]\n  bData <- getSymbols(B, from=startDate, auto.assign = F)\n  b.p <- bData[,6]\n  s2 <- merge(a.p, b.p, all=F)\n  #interpolated <- na.approx(s2)         # linear interpolation\n  #interpolated <- na.locf(s2)           # last observation carry forward\n  a.p <- s2[,1]; b.p <- s2[,2]\n  \n  #************************ step 1: check price I(1) or return I(0) ******************#\n  # two price series should have same integration order I(1)\n  a.acf <- acf(a.p, plot = F); a.pacf <- pacf(a.p, plot = F)\n  b.acf <- acf(b.p, plot = F); b.pacf <- pacf(b.p, plot = F)\n  adf.a <- adf.test(a.p, k = 1)\n  adf.b <- adf.test(b.p, k = 1)\n  a.r <- diff(log(a.p))\n  b.r <- diff(log(b.p))\n  adf.a.r <- adf.test(a.r[-1], k = 1)\n  adf.b.r <- adf.test(b.r[-1], k = 1)\n  pp.test(a.p);  pp.test(a.r[-1])          # Phillips-Perron unit root\n  pp.test(b.p);  pp.test(b.r[-1])          # Phillips-Perron unit root\n  po.test(merge(a.r[-1],b.r[-1]))         # Phillips-Ouliaris Cointegration\n  cat(\"stock A price: ADF(p-value)\", c(adf.a$statistic, adf.a$p.value), \" stock B price: ADF(p-value)\", c(adf.b$statistic, adf.b$p.value),'\\n')\n  cat(\"stock A return: ADF(p-value)\", c(adf.a.r$statistic, adf.a.r$p.value), \" stock B return: ADF(p-value)\", c(adf.b.r$statistic, adf.b.r$p.value),'\\n')\n  \n  #************************ step 2: Engle-Granger Regression ******************#\n  # 2.1 plot rolling hedging ratios to see if it is stationary\n  hedgeRatioAB <- rep(as.numeric(NA), length(a.p))\n  for (t in lookback:length(hedgeRatioAB))\n  {\n    regression_result <- lm(a.p[(t-lookback+1):t] ~ b.p[(t-lookback+1):t])\n    hedgeRatioAB[t] <- regression_result[[\"coefficients\"]][2]\n  }\n  hedgeRatioAB <- xts(hedgeRatioAB, index(a.p))          # make it xts again\n  plot(hedgeRatioAB)\n  \n  hedgeRatioBA <- rep(as.numeric(NA), length(a.p))\n  for (t in lookback:length(hedgeRatioBA))\n  {\n    regression_result <- lm(b.p[(t-lookback+1):t] ~ a.p[(t-lookback+1):t])\n    hedgeRatioBA[t] <- regression_result[[\"coefficients\"]][2]\n  }\n  hedgeRatioBA <- xts(hedgeRatioBA, index(a.p))          # make it xts again\n  plot(hedgeRatioBA)\n  \n  # 2.2 find today's cointegration coefficients/long run relationship\n  # regA <- lm(a.p ~ b.p + 0)\n  regAB <- lm(a.p[(nrow(a.p)-lookback+1):nrow(a.p)] ~ b.p[(nrow(b.p)-lookback+1):nrow(b.p)])\n  summary(regAB)\n  hrAB <- adfTest(coredata(regAB$residuals), type='nc')\n  \n  regBA <- lm(b.p[(nrow(b.p)-lookback+1):nrow(b.p)] ~ a.p[(nrow(a.p)-lookback+1):nrow(a.p)])\n  summary(regBA)\n  hrBA <- adfTest(coredata(regBA$residuals), type='nc')\n  cat(\"lm A ~ B: h, statistic, p-value: \", c(regAB[['coefficients']][2], hrAB@test$statistic, hrAB@test$p.value),'\\n')\n  cat(\"lm B ~ A: h, statistic, p-value: \", c(regBA[['coefficients']][2], hrBA@test$statistic, hrBA@test$p.value),'\\n')\n  \n  #************************ step 3: Johansen Test ******************#\n  ## nul hypothesis f r=0 < (no cointegration at all), r<1 (till n-1, where n=2 in this case)\n  ## eigenvectors are normalised column vectors ordered in decreasing order of their corresponding eigenvalues\n  ## so the first cointegrating relation is strongest\n  johansen <- ca.jo(data.frame(a.p,b.p), type='trace', K=2, ecdet='none', spec='longrun')\n  summary(johansen)\n  cat('johansen lambda: ', johansen@lambda, '\\n')\n  cat('johansen teststat: ', johansen@teststat, '\\n')\n  cat(\"johansen c-value 10pct: \", johansen@cval[,1], \" 5pct: \", johansen@cval[,2], \" 1pct: \", johansen@cval[,3],'\\n')\n  \n  return(johansen@V[,1])  # first eigenvector\n}",
    "created" : 1415668545990.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "488744324",
    "id" : "C618DB25",
    "lastKnownWriteTime" : 1411710544,
    "path" : "C:/QuantTrading/Strategies/R/CointegrationTests.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}